# -*- coding: utf-8 -*-
"""assignment problem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14dcOGt9_nmDSwHxiFyiDhzm-2SMqfTPu
"""

pip install PuLP

from pulp import *
import pandas as pd

from google.colab import drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/My Drive/input data

# Download dataset. Values in cells are scores of a certain team player on a certain place
task_init = pd.read_csv('assignment.csv',delimiter=';')
task_init

# Transpose a matrix (it should feed into the PuLP model properly)
task = task_init.T

workers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]  #15 potential players (employee)
jobs=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]      #only 11 places in team (+3 fictive places to create a symmetric matrix)

task.index = workers
workers

task.columns = jobs
jobs

# Define a problem
prob = LpProblem("Assignment_problem", LpMaximize)

# The cost data is made into a dictionary
costs = task.to_dict() #costs = occupied places

# Creates a list of tuples containing all the possible assignments (matchings)
assign = [(j, w) for j in jobs for w in workers]

# A dictionary called 'Vars' is created to contain the referenced variables
vars = LpVariable.dicts("Assign", (jobs, workers), 0, None, LpBinary)

# The objective function is added to 'prob' first
prob += (
    lpSum([vars[j][w]* costs[j][w] for (j, w) in assign]),
    "Sum_of_Assignment_Costs",
)

# There are row constraints. Each job can be assigned to only one employee.
for j in jobs:
    prob+= lpSum(vars[j][w] for w in workers) == 1

# There are column constraints. Each employee can be assigned to only one job.
for w in workers:
    prob+= lpSum(vars[j][w] for j in jobs) == 1

# The problem is solved using PuLP's choice of Solver
prob.solve()

# The optimised objective function value is printed to the screen
print("Value of Objective Function = ", value(prob.objective))

# Print optimal values of decision variables.
for v in prob.variables():
    print(v.name, "=", v.varValue)

"""Resources:

https://machinelearninggeek.com/solving-assignment-problem-using-linear-programming-in-python/

https://dougfenstermacher.com/blog/combinatorial-optimization#5-task-assignment#https://machinelearninggeek.com/solving-assignment-problem-using-linear-programming-in-python/
"""